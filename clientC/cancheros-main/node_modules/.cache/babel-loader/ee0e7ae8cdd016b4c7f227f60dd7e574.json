{"ast":null,"code":"import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Tooltip as LeafletTooltip } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Tooltip = createOverlayComponent(function createTooltip(props, context) {\n  const tooltip = new LeafletTooltip(props, context.overlayContainer);\n  return createElementObject(tooltip, context);\n}, function useTooltipLifecycle(element, context, _ref, setOpen) {\n  let {\n    position\n  } = _ref;\n  useEffect(function addTooltip() {\n    const container = context.overlayContainer;\n\n    if (container == null) {\n      return;\n    }\n\n    const {\n      instance\n    } = element;\n\n    const onTooltipOpen = event => {\n      if (event.tooltip === instance) {\n        if (position != null) {\n          instance.setLatLng(position);\n        }\n\n        instance.update();\n        setOpen(true);\n      }\n    };\n\n    const onTooltipClose = event => {\n      if (event.tooltip === instance) {\n        setOpen(false);\n      }\n    };\n\n    container.on({\n      tooltipopen: onTooltipOpen,\n      tooltipclose: onTooltipClose\n    });\n    container.bindTooltip(instance);\n    return function removeTooltip() {\n      container.off({\n        tooltipopen: onTooltipOpen,\n        tooltipclose: onTooltipClose\n      }); // @ts-ignore protected property\n\n      if (container._map != null) {\n        container.unbindTooltip();\n      }\n    };\n  }, [element, context, setOpen, position]);\n});","map":{"version":3,"sources":["C:/Users/Angel Esteban A/Desktop/cancherosAPP/clientC/cancheros-main/node_modules/react-leaflet/lib/Tooltip.js"],"names":["createElementObject","createOverlayComponent","Tooltip","LeafletTooltip","useEffect","createTooltip","props","context","tooltip","overlayContainer","useTooltipLifecycle","element","setOpen","position","addTooltip","container","instance","onTooltipOpen","event","setLatLng","update","onTooltipClose","on","tooltipopen","tooltipclose","bindTooltip","removeTooltip","off","_map","unbindTooltip"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,sBAA9B,QAA4D,qBAA5D;AACA,SAASC,OAAO,IAAIC,cAApB,QAA0C,SAA1C;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAO,MAAMF,OAAO,GAAGD,sBAAsB,CAAC,SAASI,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuC;AACjF,QAAMC,OAAO,GAAG,IAAIL,cAAJ,CAAmBG,KAAnB,EAA0BC,OAAO,CAACE,gBAAlC,CAAhB;AACA,SAAOT,mBAAmB,CAACQ,OAAD,EAAUD,OAAV,CAA1B;AACH,CAH4C,EAG1C,SAASG,mBAAT,CAA6BC,OAA7B,EAAsCJ,OAAtC,QAA8DK,OAA9D,EAAuE;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AACtET,EAAAA,SAAS,CAAC,SAASU,UAAT,GAAsB;AAC5B,UAAMC,SAAS,GAAGR,OAAO,CAACE,gBAA1B;;AACA,QAAIM,SAAS,IAAI,IAAjB,EAAuB;AACnB;AACH;;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAgBL,OAAtB;;AACA,UAAMM,aAAa,GAAIC,KAAD,IAAS;AAC3B,UAAIA,KAAK,CAACV,OAAN,KAAkBQ,QAAtB,EAAgC;AAC5B,YAAIH,QAAQ,IAAI,IAAhB,EAAsB;AAClBG,UAAAA,QAAQ,CAACG,SAAT,CAAmBN,QAAnB;AACH;;AACDG,QAAAA,QAAQ,CAACI,MAAT;AACAR,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,KARD;;AASA,UAAMS,cAAc,GAAIH,KAAD,IAAS;AAC5B,UAAIA,KAAK,CAACV,OAAN,KAAkBQ,QAAtB,EAAgC;AAC5BJ,QAAAA,OAAO,CAAC,KAAD,CAAP;AACH;AACJ,KAJD;;AAKAG,IAAAA,SAAS,CAACO,EAAV,CAAa;AACTC,MAAAA,WAAW,EAAEN,aADJ;AAETO,MAAAA,YAAY,EAAEH;AAFL,KAAb;AAIAN,IAAAA,SAAS,CAACU,WAAV,CAAsBT,QAAtB;AACA,WAAO,SAASU,aAAT,GAAyB;AAC5BX,MAAAA,SAAS,CAACY,GAAV,CAAc;AACVJ,QAAAA,WAAW,EAAEN,aADH;AAEVO,QAAAA,YAAY,EAAEH;AAFJ,OAAd,EAD4B,CAK5B;;AACA,UAAIN,SAAS,CAACa,IAAV,IAAkB,IAAtB,EAA4B;AACxBb,QAAAA,SAAS,CAACc,aAAV;AACH;AACJ,KATD;AAUH,GAnCQ,EAmCN,CACClB,OADD,EAECJ,OAFD,EAGCK,OAHD,EAICC,QAJD,CAnCM,CAAT;AAyCH,CA7C4C,CAAtC","sourcesContent":["import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Tooltip as LeafletTooltip } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Tooltip = createOverlayComponent(function createTooltip(props, context) {\n    const tooltip = new LeafletTooltip(props, context.overlayContainer);\n    return createElementObject(tooltip, context);\n}, function useTooltipLifecycle(element, context, { position  }, setOpen) {\n    useEffect(function addTooltip() {\n        const container = context.overlayContainer;\n        if (container == null) {\n            return;\n        }\n        const { instance  } = element;\n        const onTooltipOpen = (event)=>{\n            if (event.tooltip === instance) {\n                if (position != null) {\n                    instance.setLatLng(position);\n                }\n                instance.update();\n                setOpen(true);\n            }\n        };\n        const onTooltipClose = (event)=>{\n            if (event.tooltip === instance) {\n                setOpen(false);\n            }\n        };\n        container.on({\n            tooltipopen: onTooltipOpen,\n            tooltipclose: onTooltipClose\n        });\n        container.bindTooltip(instance);\n        return function removeTooltip() {\n            container.off({\n                tooltipopen: onTooltipOpen,\n                tooltipclose: onTooltipClose\n            });\n            // @ts-ignore protected property\n            if (container._map != null) {\n                container.unbindTooltip();\n            }\n        };\n    }, [\n        element,\n        context,\n        setOpen,\n        position\n    ]);\n});\n"]},"metadata":{},"sourceType":"module"}