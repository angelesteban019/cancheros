'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _Event = require('../Event');

var _Event2 = _interopRequireDefault(_Event);

var invalidRangeError = new ReferenceError("Invalid range of dates");

var Calendar = (function () {
  function Calendar() {
    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _ref$startTime = _ref.startTime;
    var startTime = _ref$startTime === undefined ? (0, _moment2['default'])() : _ref$startTime;
    var _ref$endTime = _ref.endTime;
    var endTime = _ref$endTime === undefined ? (0, _moment2['default'])().add(1, 'year') : _ref$endTime;

    _classCallCheck(this, Calendar);

    if (startTime.isAfter(endTime)) {

      throw invalidRangeError;
    } else {

      this._startTime = startTime;
      this._endTime = endTime;
      this._events = new Array();
    }
  }

  _createClass(Calendar, [{
    key: 'isValidEvent',
    value: function isValidEvent(event) {
      var isValid = event.isBetween(this._startTime, this._endTime);

      for (var i = 0; i < this._events.length && isValid; i++) {
        var e = this._events[i];
        isValid = !e.collide(event);
      }

      return isValid;
    }
  }, {
    key: 'addEvent',
    value: function addEvent(event) {
      if (this.isValidEvent(event)) {
        this._events.push(event);
      }
    }
  }, {
    key: 'startTime',
    get: function get() {
      return this._startTime.calendar();
    }
  }, {
    key: 'endTime',
    get: function get() {
      return this._endTime.calendar();
    }
  }, {
    key: 'events',
    get: function get() {
      return this._events;
    }
  }]);

  return Calendar;
})();

exports['default'] = Calendar;
module.exports = exports['default'];