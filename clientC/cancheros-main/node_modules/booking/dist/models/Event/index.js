"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var invalidStartDateError = new ReferenceError("Invalid starting point");
var invalidDurationError = new ReferenceError("Invalid duration period");

var Event = (function () {
  function Event() {
    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _ref$startTime = _ref.startTime;
    var startTime = _ref$startTime === undefined ? (0, _moment2["default"])() : _ref$startTime;
    var _ref$duration = _ref.duration;
    var duration = _ref$duration === undefined ? _moment2["default"].duration(1, 'hours') : _ref$duration;

    _classCallCheck(this, Event);

    if (startTime.isBefore((0, _moment2["default"])())) {

      throw invalidStartDateError;
    } else if (!_moment2["default"].isDuration(duration)) {

      throw invalidDurationError;
    } else {

      this._startTime = startTime;
      this._duration = duration;
    }
  }

  _createClass(Event, [{
    key: "isBetween",
    value: function isBetween(start, end) {
      var endTime = (0, _moment2["default"])(this._startTime).add(this._duration);
      return this._startTime.isAfter(start) && endTime.isBefore(end);
    }
  }, {
    key: "inRange",
    value: function inRange(start, end) {
      var endTime = (0, _moment2["default"])(this._startTime).add(this._duration);

      return endTime.isBetween(start, end) || this._startTime.isBetween(start, end) || start.isBetween(this._startTime, endTime) || end.isBetween(this._startTime, endTime);
    }
  }, {
    key: "collide",
    value: function collide(event) {
      var endTime = (0, _moment2["default"])(this._startTime).add(this._duration);

      return event.inRange(this._startTime, endTime);
    }
  }, {
    key: "startTime",
    get: function get() {
      return this._startTime.calendar();
    }
  }, {
    key: "duration",
    get: function get() {
      return this._duration.toJSON();
    }
  }, {
    key: "endTime",
    get: function get() {
      return (0, _moment2["default"])(this._startTime).add(this._duration).calendar();
    }
  }]);

  return Event;
})();

exports["default"] = Event;
module.exports = exports["default"];