
import moment from 'moment';

const invalidStartDateError = new ReferenceError("Invalid starting point");
const invalidDurationError = new ReferenceError("Invalid duration period");

class Event {

  constructor({ startTime = moment(), duration = moment.duration(1, 'hours') } = {}) {

    if (startTime.isBefore(moment())) {

      throw invalidStartDateError;

    } else if (!moment.isDuration(duration)) {

      throw invalidDurationError;

    } else {

      this._startTime = startTime;
      this._duration = duration;
    }
  }

  isBetween(start, end) {
    let endTime = moment(this._startTime).add(this._duration);
    return (this._startTime.isAfter(start) && endTime.isBefore(end));
  }

  inRange(start, end) {
    let endTime = moment(this._startTime).add(this._duration);

    return (endTime.isBetween(start, end) ||
            this._startTime.isBetween(start, end) ||
            start.isBetween(this._startTime, endTime) ||
            end.isBetween(this._startTime, endTime));
  }

  collide(event) {
    let endTime = moment(this._startTime).add(this._duration);

    return event.inRange(this._startTime, endTime);
  }

  get startTime() {
    return this._startTime.calendar();
  }

  get duration() {
    return this._duration.toJSON();
  }

  get endTime() {
    return moment(this._startTime).add(this._duration).calendar();
  }

}

export default Event;
