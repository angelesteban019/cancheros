import {expect} from 'chai';
import moment   from 'moment';
import Event    from '../.';

describe('Event', function() {

  describe('attributes', function() {
    it('has getters for startTime and endTime', function() {
      let event = new Event();

      expect(event).to.have.property('startTime');
      expect(event).to.have.property('endTime');
      expect(event).to.have.property('duration');
    });
  });

  describe('duration', function() {
    it('by default is an hour', function() {
      let event = new Event();
      expect(event.duration).to.be.equal(moment.duration(1, 'hours').toJSON());
    });

    it('takes durations as parameter', function() {
      let duration = moment.duration(5, 'hours');
      let event = new Event({ duration: duration });
      expect(event.duration).to.be.equal(duration.toJSON());
    });

  });

  describe('endTime', function() {
    it('by default is an hour', function() {
      let event = new Event();
      expect(event.endTime).to.be.equal(moment().add(moment.duration(1, 'hours')).calendar());
    });
  });

  describe('timeRange', function() {
    it('by default startTime is now', function() {
      let event = new Event();
      expect(event.startTime).to.be.equal(moment().calendar());
    });

    describe('startTime day must be before endTime', function() {

      it('Throws an error if not the case', function() {
        let duration = moment.duration(1, 'hours');
        const opts = {
          startTime: moment().subtract(2, 'hour'),
          duration: duration
        };
        expect(() => { new Event(opts) }).to.throw(ReferenceError);
      });
    });
    describe('duration must be duration object', function() {

      it('Throws an error if not the case', function() {
        const opts = {
          duration: 'fake hour'
        };
        expect(() => { new Event(opts) }).to.throw(ReferenceError);
      });
    });
  });

  describe('isBetween', function() {

    describe('when it is in between', function() {

      it('should return true', function() {

        let event = new Event({ startTime: moment().add(2, 'hour') });
        expect(event.isBetween(moment(), moment().add(5, 'hour'))).to.be.true;
      });
    });

    describe('when it is not in between', function() {

      it('should return false', function() {

        let event = new Event({ startTime: moment().add(5, 'hour') });
        expect(event.isBetween(moment(), moment().add(1, 'hour'))).to.be.false;
      });
    });
  });

  describe('inRange', function() {

    describe('when it is in range', function() {

      it('should return true', function() {

        let event = new Event({ startTime: moment().add(2, 'hour') });
        expect(event.inRange(moment(), moment().add(5, 'hour'))).to.be.true;
      });
    });

    describe('when it is not in range', function() {

      it('should return false', function() {

        let event = new Event({ startTime: moment().add(5, 'hour') });
        expect(event.inRange(moment(), moment().add(1, 'hour'))).to.be.false;
      });
    });
  });

  describe('collide', function() {

    describe('when it is in range', function() {

      it('should return true', function() {
        let fiveHours = moment.duration(5, 'hours');

        let event2 = new Event({ startTime: moment().add(2, 'hour') });
        let event1 = new Event({ duration: fiveHours });

        expect(event2.collide(event1)).to.be.true;
        expect(event1.collide(event2)).to.be.true;
      });
    });

    describe('when it is not in range', function() {

      it('should return false', function() {

        let event1 = new Event({ startTime: moment(), duration: moment.duration(2, 'hours') });
        let event2 = new Event({ startTime: moment().add(4, 'hour') });
        expect(event1.collide(event2)).to.be.false;
      });
    });
  });
});
