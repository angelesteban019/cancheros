import {expect} from 'chai';
import moment   from 'moment';
import Calendar from '../.';
import Event    from '../../Event';

describe('Calendar', function() {

  describe('attributes', function() {
    it('has getters for startTime and endTime', function() {
      let calendar = new Calendar();

      expect(calendar).to.have.property('startTime');
      expect(calendar).to.have.property('endTime');
    });
  });

  describe('timeRange', function() {
    it('by default startTime is today', function() {
      let now = moment();
      let calendar = new Calendar();
      expect(calendar.startTime).to.be.equal(now.calendar());
    });

    describe('startTime day must be before endTime', function() {

      it('Throws an error if not the case', function() {
        const opts = {
          startTime: moment().add(1, 'week'),
          endTime: moment()
        }
        expect(() => { new Calendar(opts) }).to.throw(ReferenceError);
      });
    });
  });

  describe('events', function() {

    describe('isValidEvent', function() {

      describe('when it is not valid', function() {
        it('the event is not added to the list', function() {
          let calendar = new Calendar({ startTime: moment().add(1, 'months')});
          let event    = new Event();
          calendar.addEvent(event);
          expect(calendar.events).to.be.empty;
        });
      });

      describe('when it is valid', function() {
        it('Event is added to the list', function() {
          let calendar = new Calendar();
          let event    = new Event({ startTime: moment().add(1, 'hours')});
          calendar.addEvent(event);
          expect(calendar.events).to.include(event);
        });
      });
      describe('when there is already a event that collide', function() {
        it('does not add the new event', function() {
          let calendar = new Calendar();
          let event1   = new Event({ startTime: moment().add(1, 'hours'),
                                     duration: moment.duration(5, 'hours') });
          let event2   = new Event({ startTime: moment().add(2, 'hours')});
          calendar.addEvent(event1);
          calendar.addEvent(event2);
          expect(calendar.events).to.include(event1);
          expect(calendar.events).to.not.include(event2);
        });
      });
    });
  });
});
